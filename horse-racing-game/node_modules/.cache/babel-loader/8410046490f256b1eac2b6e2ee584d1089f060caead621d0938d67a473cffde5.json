{"ast":null,"code":"import \"core-js/modules/es.array.push.js\";\nimport \"core-js/modules/esnext.set.difference.v2.js\";\nimport \"core-js/modules/esnext.set.intersection.v2.js\";\nimport \"core-js/modules/esnext.set.is-disjoint-from.v2.js\";\nimport \"core-js/modules/esnext.set.is-subset-of.v2.js\";\nimport \"core-js/modules/esnext.set.is-superset-of.v2.js\";\nimport \"core-js/modules/esnext.set.symmetric-difference.v2.js\";\nimport \"core-js/modules/esnext.set.union.v2.js\";\nimport { createStore } from 'vuex';\nconst LOCAL_STORAGE_KEY = 'horse-racing-game';\nexport default createStore({\n  state: {\n    horses: [],\n    raceSchedule: []\n  },\n  mutations: {\n    setHorses(state, horses) {\n      state.horses = horses;\n    },\n    setRaceSchedule(state, schedule) {\n      state.raceSchedule = schedule;\n    },\n    updateHorsePosition(state, {\n      horseId,\n      position\n    }) {\n      const horse = state.horses.find(h => h.id === horseId);\n      if (horse) {\n        horse.position = position;\n      }\n    },\n    resetHorsePositions(state) {\n      state.horses.forEach(horse => {\n        horse.position = 0;\n      });\n    }\n  },\n  actions: {\n    async generateHorses({\n      commit\n    }) {\n      let storedHorses = JSON.parse(localStorage.getItem(LOCAL_STORAGE_KEY));\n      if (!storedHorses) {\n        storedHorses = generateHorses();\n        localStorage.setItem(LOCAL_STORAGE_KEY, JSON.stringify(storedHorses));\n      }\n      commit('setHorses', storedHorses);\n      const schedule = generateRaceSchedule(storedHorses);\n      commit('setRaceSchedule', schedule);\n    },\n    async startRace({\n      commit,\n      state\n    }) {\n      commit('resetHorsePositions');\n      const schedule = generateRaceSchedule(state.horses);\n      commit('setRaceSchedule', schedule);\n      const tickInterval = 100; // Her tick arasındaki süre (ms)\n\n      const interval = setInterval(() => {\n        let raceFinished = true;\n        schedule.forEach(race => {\n          race.horses.forEach(horse => {\n            const speed = horse.speed * tickInterval / 1000; // Hızı px/ms cinsinden hesapla\n            const newPosition = horse.position + speed;\n            commit('updateHorsePosition', {\n              horseId: horse.id,\n              position: newPosition\n            });\n\n            // Yarış bitmediyse raceFinished'i false yap\n            if (newPosition < race.distance) {\n              raceFinished = false;\n            }\n          });\n        });\n\n        // Eğer yarış bitti ise interval'i temizle\n        if (raceFinished) {\n          clearInterval(interval);\n          setTimeout(() => {\n            commit('resetHorsePositions');\n          }, tickInterval);\n        }\n      }, tickInterval);\n    }\n  }\n});\nfunction generateHorses() {\n  const horses = [];\n  for (let i = 1; i <= 20; i++) {\n    const condition = Math.floor(Math.random() * 100) + 1;\n    const speed = condition / 10; // Hızı condition'a göre daha yüksek bir değere ayarla\n    horses.push({\n      id: i,\n      color: getRandomColor(),\n      condition: condition,\n      position: 0,\n      speed: speed,\n      image: require(`@/assets/horse${i}.png`)\n    });\n  }\n  return horses;\n}\nfunction getRandomColor() {\n  const letters = '0123456789ABCDEF';\n  let color = '#';\n  for (let i = 0; i < 6; i++) {\n    color += letters[Math.floor(Math.random() * 16)];\n  }\n  return color;\n}\nfunction generateRaceSchedule(horses) {\n  const distances = [1200, 1400, 1600, 1800, 2000, 2200];\n  const schedule = distances.map(distance => {\n    const selectedHorses = [];\n    const horseIds = new Set();\n    for (let i = 1; i <= 10; i++) {\n      let horse;\n      do {\n        horse = horses[Math.floor(Math.random() * horses.length)];\n      } while (horseIds.has(horse.id));\n      selectedHorses.push(horse);\n      horseIds.add(horse.id);\n    }\n    return {\n      distance,\n      horses: selectedHorses\n    };\n  });\n  return schedule;\n}","map":{"version":3,"names":["createStore","LOCAL_STORAGE_KEY","state","horses","raceSchedule","mutations","setHorses","setRaceSchedule","schedule","updateHorsePosition","horseId","position","horse","find","h","id","resetHorsePositions","forEach","actions","generateHorses","commit","storedHorses","JSON","parse","localStorage","getItem","setItem","stringify","generateRaceSchedule","startRace","tickInterval","interval","setInterval","raceFinished","race","speed","newPosition","distance","clearInterval","setTimeout","i","condition","Math","floor","random","push","color","getRandomColor","image","require","letters","distances","map","selectedHorses","horseIds","Set","length","has","add"],"sources":["/Users/aleynakoluk/Desktop/horse-racing-game/src/store/index.js"],"sourcesContent":["import { createStore } from 'vuex';\n\nconst LOCAL_STORAGE_KEY = 'horse-racing-game';\n\nexport default createStore({\n  state: {\n    horses: [],\n    raceSchedule: [],\n  },\n  mutations: {\n    setHorses(state, horses) {\n      state.horses = horses;\n    },\n    setRaceSchedule(state, schedule) {\n      state.raceSchedule = schedule;\n    },\n    updateHorsePosition(state, { horseId, position }) {\n      const horse = state.horses.find(h => h.id === horseId);\n      if (horse) {\n        horse.position = position;\n      }\n    },\n    resetHorsePositions(state) {\n      state.horses.forEach(horse => {\n        horse.position = 0;\n      });\n    },\n  },\n  actions: {\n    async generateHorses({ commit }) {\n      let storedHorses = JSON.parse(localStorage.getItem(LOCAL_STORAGE_KEY));\n      if (!storedHorses) {\n        storedHorses = generateHorses();\n        localStorage.setItem(LOCAL_STORAGE_KEY, JSON.stringify(storedHorses));\n      }\n      commit('setHorses', storedHorses);\n      const schedule = generateRaceSchedule(storedHorses);\n      commit('setRaceSchedule', schedule);\n    },\n    async startRace({ commit, state }) {\n      commit('resetHorsePositions');\n      const schedule = generateRaceSchedule(state.horses);\n      commit('setRaceSchedule', schedule);\n\n      const tickInterval = 100; // Her tick arasındaki süre (ms)\n\n      const interval = setInterval(() => {\n        let raceFinished = true;\n        schedule.forEach(race => {\n          race.horses.forEach(horse => {\n            const speed = horse.speed * tickInterval / 1000; // Hızı px/ms cinsinden hesapla\n            const newPosition = horse.position + speed;\n            commit('updateHorsePosition', { horseId: horse.id, position: newPosition });\n\n            // Yarış bitmediyse raceFinished'i false yap\n            if (newPosition < race.distance) {\n              raceFinished = false;\n            }\n          });\n        });\n\n        // Eğer yarış bitti ise interval'i temizle\n        if (raceFinished) {\n          clearInterval(interval);\n          setTimeout(() => {\n            commit('resetHorsePositions');\n          }, tickInterval);\n        }\n      }, tickInterval);\n    },\n  },\n});\n\nfunction generateHorses() {\n  const horses = [];\n  for (let i = 1; i <= 20; i++) {\n    const condition = Math.floor(Math.random() * 100) + 1;\n    const speed = condition / 10; // Hızı condition'a göre daha yüksek bir değere ayarla\n    horses.push({\n      id: i,\n      color: getRandomColor(),\n      condition: condition,\n      position: 0,\n      speed: speed,\n      image: require(`@/assets/horse${i}.png`),\n    });\n  }\n  return horses;\n}\n\nfunction getRandomColor() {\n  const letters = '0123456789ABCDEF';\n  let color = '#';\n  for (let i = 0; i < 6; i++) {\n    color += letters[Math.floor(Math.random() * 16)];\n  }\n  return color;\n}\n\nfunction generateRaceSchedule(horses) {\n  const distances = [1200, 1400, 1600, 1800, 2000, 2200];\n  const schedule = distances.map(distance => {\n    const selectedHorses = [];\n    const horseIds = new Set();\n\n    for (let i = 1; i <= 10; i++) {\n      let horse;\n      do {\n        horse = horses[Math.floor(Math.random() * horses.length)];\n      } while (horseIds.has(horse.id));\n      selectedHorses.push(horse);\n      horseIds.add(horse.id);\n    }\n\n    return {\n      distance,\n      horses: selectedHorses,\n    };\n  });\n  return schedule;\n}\n"],"mappings":";;;;;;;;AAAA,SAASA,WAAW,QAAQ,MAAM;AAElC,MAAMC,iBAAiB,GAAG,mBAAmB;AAE7C,eAAeD,WAAW,CAAC;EACzBE,KAAK,EAAE;IACLC,MAAM,EAAE,EAAE;IACVC,YAAY,EAAE;EAChB,CAAC;EACDC,SAAS,EAAE;IACTC,SAASA,CAACJ,KAAK,EAAEC,MAAM,EAAE;MACvBD,KAAK,CAACC,MAAM,GAAGA,MAAM;IACvB,CAAC;IACDI,eAAeA,CAACL,KAAK,EAAEM,QAAQ,EAAE;MAC/BN,KAAK,CAACE,YAAY,GAAGI,QAAQ;IAC/B,CAAC;IACDC,mBAAmBA,CAACP,KAAK,EAAE;MAAEQ,OAAO;MAAEC;IAAS,CAAC,EAAE;MAChD,MAAMC,KAAK,GAAGV,KAAK,CAACC,MAAM,CAACU,IAAI,CAACC,CAAC,IAAIA,CAAC,CAACC,EAAE,KAAKL,OAAO,CAAC;MACtD,IAAIE,KAAK,EAAE;QACTA,KAAK,CAACD,QAAQ,GAAGA,QAAQ;MAC3B;IACF,CAAC;IACDK,mBAAmBA,CAACd,KAAK,EAAE;MACzBA,KAAK,CAACC,MAAM,CAACc,OAAO,CAACL,KAAK,IAAI;QAC5BA,KAAK,CAACD,QAAQ,GAAG,CAAC;MACpB,CAAC,CAAC;IACJ;EACF,CAAC;EACDO,OAAO,EAAE;IACP,MAAMC,cAAcA,CAAC;MAAEC;IAAO,CAAC,EAAE;MAC/B,IAAIC,YAAY,GAAGC,IAAI,CAACC,KAAK,CAACC,YAAY,CAACC,OAAO,CAACxB,iBAAiB,CAAC,CAAC;MACtE,IAAI,CAACoB,YAAY,EAAE;QACjBA,YAAY,GAAGF,cAAc,CAAC,CAAC;QAC/BK,YAAY,CAACE,OAAO,CAACzB,iBAAiB,EAAEqB,IAAI,CAACK,SAAS,CAACN,YAAY,CAAC,CAAC;MACvE;MACAD,MAAM,CAAC,WAAW,EAAEC,YAAY,CAAC;MACjC,MAAMb,QAAQ,GAAGoB,oBAAoB,CAACP,YAAY,CAAC;MACnDD,MAAM,CAAC,iBAAiB,EAAEZ,QAAQ,CAAC;IACrC,CAAC;IACD,MAAMqB,SAASA,CAAC;MAAET,MAAM;MAAElB;IAAM,CAAC,EAAE;MACjCkB,MAAM,CAAC,qBAAqB,CAAC;MAC7B,MAAMZ,QAAQ,GAAGoB,oBAAoB,CAAC1B,KAAK,CAACC,MAAM,CAAC;MACnDiB,MAAM,CAAC,iBAAiB,EAAEZ,QAAQ,CAAC;MAEnC,MAAMsB,YAAY,GAAG,GAAG,CAAC,CAAC;;MAE1B,MAAMC,QAAQ,GAAGC,WAAW,CAAC,MAAM;QACjC,IAAIC,YAAY,GAAG,IAAI;QACvBzB,QAAQ,CAACS,OAAO,CAACiB,IAAI,IAAI;UACvBA,IAAI,CAAC/B,MAAM,CAACc,OAAO,CAACL,KAAK,IAAI;YAC3B,MAAMuB,KAAK,GAAGvB,KAAK,CAACuB,KAAK,GAAGL,YAAY,GAAG,IAAI,CAAC,CAAC;YACjD,MAAMM,WAAW,GAAGxB,KAAK,CAACD,QAAQ,GAAGwB,KAAK;YAC1Cf,MAAM,CAAC,qBAAqB,EAAE;cAAEV,OAAO,EAAEE,KAAK,CAACG,EAAE;cAAEJ,QAAQ,EAAEyB;YAAY,CAAC,CAAC;;YAE3E;YACA,IAAIA,WAAW,GAAGF,IAAI,CAACG,QAAQ,EAAE;cAC/BJ,YAAY,GAAG,KAAK;YACtB;UACF,CAAC,CAAC;QACJ,CAAC,CAAC;;QAEF;QACA,IAAIA,YAAY,EAAE;UAChBK,aAAa,CAACP,QAAQ,CAAC;UACvBQ,UAAU,CAAC,MAAM;YACfnB,MAAM,CAAC,qBAAqB,CAAC;UAC/B,CAAC,EAAEU,YAAY,CAAC;QAClB;MACF,CAAC,EAAEA,YAAY,CAAC;IAClB;EACF;AACF,CAAC,CAAC;AAEF,SAASX,cAAcA,CAAA,EAAG;EACxB,MAAMhB,MAAM,GAAG,EAAE;EACjB,KAAK,IAAIqC,CAAC,GAAG,CAAC,EAAEA,CAAC,IAAI,EAAE,EAAEA,CAAC,EAAE,EAAE;IAC5B,MAAMC,SAAS,GAAGC,IAAI,CAACC,KAAK,CAACD,IAAI,CAACE,MAAM,CAAC,CAAC,GAAG,GAAG,CAAC,GAAG,CAAC;IACrD,MAAMT,KAAK,GAAGM,SAAS,GAAG,EAAE,CAAC,CAAC;IAC9BtC,MAAM,CAAC0C,IAAI,CAAC;MACV9B,EAAE,EAAEyB,CAAC;MACLM,KAAK,EAAEC,cAAc,CAAC,CAAC;MACvBN,SAAS,EAAEA,SAAS;MACpB9B,QAAQ,EAAE,CAAC;MACXwB,KAAK,EAAEA,KAAK;MACZa,KAAK,EAAEC,OAAO,CAAC,iBAAiBT,CAAC,MAAM;IACzC,CAAC,CAAC;EACJ;EACA,OAAOrC,MAAM;AACf;AAEA,SAAS4C,cAAcA,CAAA,EAAG;EACxB,MAAMG,OAAO,GAAG,kBAAkB;EAClC,IAAIJ,KAAK,GAAG,GAAG;EACf,KAAK,IAAIN,CAAC,GAAG,CAAC,EAAEA,CAAC,GAAG,CAAC,EAAEA,CAAC,EAAE,EAAE;IAC1BM,KAAK,IAAII,OAAO,CAACR,IAAI,CAACC,KAAK,CAACD,IAAI,CAACE,MAAM,CAAC,CAAC,GAAG,EAAE,CAAC,CAAC;EAClD;EACA,OAAOE,KAAK;AACd;AAEA,SAASlB,oBAAoBA,CAACzB,MAAM,EAAE;EACpC,MAAMgD,SAAS,GAAG,CAAC,IAAI,EAAE,IAAI,EAAE,IAAI,EAAE,IAAI,EAAE,IAAI,EAAE,IAAI,CAAC;EACtD,MAAM3C,QAAQ,GAAG2C,SAAS,CAACC,GAAG,CAACf,QAAQ,IAAI;IACzC,MAAMgB,cAAc,GAAG,EAAE;IACzB,MAAMC,QAAQ,GAAG,IAAIC,GAAG,CAAC,CAAC;IAE1B,KAAK,IAAIf,CAAC,GAAG,CAAC,EAAEA,CAAC,IAAI,EAAE,EAAEA,CAAC,EAAE,EAAE;MAC5B,IAAI5B,KAAK;MACT,GAAG;QACDA,KAAK,GAAGT,MAAM,CAACuC,IAAI,CAACC,KAAK,CAACD,IAAI,CAACE,MAAM,CAAC,CAAC,GAAGzC,MAAM,CAACqD,MAAM,CAAC,CAAC;MAC3D,CAAC,QAAQF,QAAQ,CAACG,GAAG,CAAC7C,KAAK,CAACG,EAAE,CAAC;MAC/BsC,cAAc,CAACR,IAAI,CAACjC,KAAK,CAAC;MAC1B0C,QAAQ,CAACI,GAAG,CAAC9C,KAAK,CAACG,EAAE,CAAC;IACxB;IAEA,OAAO;MACLsB,QAAQ;MACRlC,MAAM,EAAEkD;IACV,CAAC;EACH,CAAC,CAAC;EACF,OAAO7C,QAAQ;AACjB","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}