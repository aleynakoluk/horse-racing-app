{"ast":null,"code":"import \"core-js/modules/es.array.push.js\";\nimport \"core-js/modules/esnext.set.difference.v2.js\";\nimport \"core-js/modules/esnext.set.intersection.v2.js\";\nimport \"core-js/modules/esnext.set.is-disjoint-from.v2.js\";\nimport \"core-js/modules/esnext.set.is-subset-of.v2.js\";\nimport \"core-js/modules/esnext.set.is-superset-of.v2.js\";\nimport \"core-js/modules/esnext.set.symmetric-difference.v2.js\";\nimport \"core-js/modules/esnext.set.union.v2.js\";\n// store/index.js\nimport { createStore } from 'vuex';\nconst LOCAL_STORAGE_KEY = 'horse-racing-game';\nexport default createStore({\n  state: {\n    horses: [],\n    raceSchedule: [],\n    raceResults: [],\n    showSchedule: false,\n    showResults: false\n  },\n  mutations: {\n    setHorses(state, horses) {\n      state.horses = horses;\n    },\n    setRaceSchedule(state, schedule) {\n      state.raceSchedule = schedule;\n    },\n    updateHorsePosition(state, {\n      horseId,\n      position\n    }) {\n      const horse = state.horses.find(h => h.id === horseId);\n      if (horse) {\n        horse.position = position;\n      }\n    },\n    addRaceResult(state, result) {\n      state.raceResults.push(result);\n    },\n    clearRaceResults(state) {\n      state.raceResults = [];\n    },\n    setShowSchedule(state, value) {\n      state.showSchedule = value;\n    },\n    setShowResults(state, value) {\n      state.showResults = false;\n    }\n  },\n  actions: {\n    generateHorses({\n      commit\n    }) {\n      const storedHorses = JSON.parse(localStorage.getItem(LOCAL_STORAGE_KEY));\n      if (storedHorses) {\n        commit('setHorses', storedHorses);\n      } else {\n        const horses = generateHorses();\n        commit('setHorses', horses);\n        localStorage.setItem(LOCAL_STORAGE_KEY, JSON.stringify(horses));\n      }\n      commit('setShowSchedule', true);\n      commit('setShowResults', false);\n    },\n    startRace({\n      commit,\n      state\n    }) {\n      commit('clearRaceResults');\n      const schedule = generateRaceSchedule(state.horses);\n      commit('setRaceSchedule', schedule);\n      schedule.forEach((race, index) => {\n        setTimeout(() => {\n          race.horses.forEach(horse => {\n            const newPosition = horse.position + Math.random() * 10;\n            commit('updateHorsePosition', {\n              horseId: horse.id,\n              position: newPosition\n            });\n          });\n          const winner = race.horses.reduce((prev, current) => prev.position > current.position ? prev : current);\n          const result = `Winner: Horse ${winner.id}`;\n          commit('addRaceResult', result);\n        }, index * 5000);\n      });\n      commit('setShowSchedule', false);\n      commit('setShowResults', true);\n    }\n  }\n});\nfunction generateHorses() {\n  const horses = [];\n  for (let i = 1; i <= 20; i++) {\n    horses.push({\n      id: i,\n      color: getRandomColor(),\n      condition: Math.floor(Math.random() * 100) + 1,\n      position: 0,\n      image: require(`@/assets/horse${i}.png`)\n    });\n  }\n  return horses;\n}\nfunction getRandomColor() {\n  const letters = '0123456789ABCDEF';\n  let color = '#';\n  for (let i = 0; i < 6; i++) {\n    color += letters[Math.floor(Math.random() * 16)];\n  }\n  return color;\n}\nfunction generateRaceSchedule(horses) {\n  const distances = [1200, 1400, 1600, 1800, 2000, 2200];\n  const schedule = distances.map(distance => {\n    const selectedHorses = [];\n    const horseIds = new Set();\n    for (let i = 1; i <= 10; i++) {\n      let horse;\n      do {\n        horse = horses[Math.floor(Math.random() * horses.length)];\n      } while (horseIds.has(horse.id));\n      selectedHorses.push(horse);\n      horseIds.add(horse.id);\n    }\n    return {\n      distance,\n      horses: selectedHorses\n    };\n  });\n  return schedule;\n}","map":{"version":3,"names":["createStore","LOCAL_STORAGE_KEY","state","horses","raceSchedule","raceResults","showSchedule","showResults","mutations","setHorses","setRaceSchedule","schedule","updateHorsePosition","horseId","position","horse","find","h","id","addRaceResult","result","push","clearRaceResults","setShowSchedule","value","setShowResults","actions","generateHorses","commit","storedHorses","JSON","parse","localStorage","getItem","setItem","stringify","startRace","generateRaceSchedule","forEach","race","index","setTimeout","newPosition","Math","random","winner","reduce","prev","current","i","color","getRandomColor","condition","floor","image","require","letters","distances","map","distance","selectedHorses","horseIds","Set","length","has","add"],"sources":["/Users/aleynakoluk/Desktop/horse-racing-game/src/store/index.js"],"sourcesContent":["// store/index.js\nimport { createStore } from 'vuex';\n\nconst LOCAL_STORAGE_KEY = 'horse-racing-game';\n\nexport default createStore({\n  state: {\n    horses: [],\n    raceSchedule: [],\n    raceResults: [],\n    showSchedule: false,\n    showResults: false,\n  },\n  mutations: {\n    setHorses(state, horses) {\n      state.horses = horses;\n    },\n    setRaceSchedule(state, schedule) {\n      state.raceSchedule = schedule;\n    },\n    updateHorsePosition(state, { horseId, position }) {\n      const horse = state.horses.find(h => h.id === horseId);\n      if (horse) {\n        horse.position = position;\n      }\n    },\n    addRaceResult(state, result) {\n      state.raceResults.push(result);\n    },\n    clearRaceResults(state) {\n      state.raceResults = [];\n    },\n    setShowSchedule(state, value) {\n      state.showSchedule = value;\n    },\n    setShowResults(state, value) {\n      state.showResults = false;\n    },\n  },\n  actions: {\n    generateHorses({ commit }) {\n      const storedHorses = JSON.parse(localStorage.getItem(LOCAL_STORAGE_KEY));\n      if (storedHorses) {\n        commit('setHorses', storedHorses);\n      } else {\n        const horses = generateHorses();\n        commit('setHorses', horses);\n        localStorage.setItem(LOCAL_STORAGE_KEY, JSON.stringify(horses));\n      }\n      commit('setShowSchedule', true);\n      commit('setShowResults', false);\n    },\n    startRace({ commit, state }) {\n      commit('clearRaceResults');\n      const schedule = generateRaceSchedule(state.horses);\n      commit('setRaceSchedule', schedule);\n\n      schedule.forEach((race, index) => {\n        setTimeout(() => {\n          race.horses.forEach(horse => {\n            const newPosition = horse.position + Math.random() * 10;\n            commit('updateHorsePosition', { horseId: horse.id, position: newPosition });\n          });\n          const winner = race.horses.reduce((prev, current) => (prev.position > current.position) ? prev : current);\n          const result = `Winner: Horse ${winner.id}`;\n          commit('addRaceResult', result);\n        }, index * 5000);\n      });\n\n      commit('setShowSchedule', false);\n      commit('setShowResults', true);\n    },\n  },\n});\n\nfunction generateHorses() {\n  const horses = [];\n  for (let i = 1; i <= 20; i++) {\n    horses.push({\n      id: i,\n      color: getRandomColor(),\n      condition: Math.floor(Math.random() * 100) + 1,\n      position: 0,\n      image: require(`@/assets/horse${i}.png`),\n    });\n  }\n  return horses;\n}\n\nfunction getRandomColor() {\n  const letters = '0123456789ABCDEF';\n  let color = '#';\n  for (let i = 0; i < 6; i++) {\n    color += letters[Math.floor(Math.random() * 16)];\n  }\n  return color;\n}\n\nfunction generateRaceSchedule(horses) {\n  const distances = [1200, 1400, 1600, 1800, 2000, 2200];\n  const schedule = distances.map(distance => {\n    const selectedHorses = [];\n    const horseIds = new Set();\n\n    for (let i = 1; i <= 10; i++) {\n      let horse;\n      do {\n        horse = horses[Math.floor(Math.random() * horses.length)];\n      } while (horseIds.has(horse.id));\n      selectedHorses.push(horse);\n      horseIds.add(horse.id);\n    }\n\n    return {\n      distance,\n      horses: selectedHorses,\n    };\n  });\n  return schedule;\n}\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}