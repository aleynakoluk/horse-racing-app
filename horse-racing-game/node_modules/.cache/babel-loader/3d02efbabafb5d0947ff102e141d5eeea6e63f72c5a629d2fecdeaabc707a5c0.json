{"ast":null,"code":"import { mapState, mapActions } from 'vuex';\nexport default {\n  name: 'HorseRace',\n  computed: {\n    ...mapState(['raceSchedule']),\n    lanes() {\n      return Array.from({\n        length: 10\n      }, (_, i) => i + 1);\n    }\n  },\n  mounted() {\n    this.generateHorses();\n  },\n  methods: {\n    horsesInLane(race, lane) {\n      return race.horses.slice((lane - 1) * 10, lane * 10);\n    },\n    async startRace() {\n      await this.generateHorses(); // Yarış başlamadan önce atları yeniden oluştur\n\n      const tickInterval = 100; // Her tıklamada geçen süre (ms)\n      const raceDuration = 5000; // Yarış süresi (ms)\n\n      const startTime = performance.now();\n      let progress = 0;\n      const animateRace = () => {\n        const currentTime = performance.now();\n        progress = currentTime - startTime;\n        if (progress < raceDuration) {\n          // Atların pozisyonunu güncelle\n          this.raceSchedule.forEach(race => {\n            race.horses.forEach(horse => {\n              const newPosition = horse.position + Math.random() * 10; // Atın rastgele hareketi\n              this.updateHorsePosition({\n                horseId: horse.id,\n                position: newPosition\n              });\n            });\n          });\n\n          // Animasyon devam ediyorsa bir sonraki frame için requestAnimationFrame çağır\n          requestAnimationFrame(animateRace);\n        } else {\n          // Yarış bittiğinde atların pozisyonlarını sıfırla\n          this.raceSchedule.forEach(race => {\n            race.horses.forEach(horse => {\n              this.updateHorsePosition({\n                horseId: horse.id,\n                position: 0\n              });\n            });\n          });\n        }\n      };\n\n      // İlk frame'i başlat\n      requestAnimationFrame(animateRace);\n    },\n    ...mapActions(['generateHorses', 'updateHorsePosition'])\n  }\n};","map":{"version":3,"names":["mapState","mapActions","name","computed","lanes","Array","from","length","_","i","mounted","generateHorses","methods","horsesInLane","race","lane","horses","slice","startRace","tickInterval","raceDuration","startTime","performance","now","progress","animateRace","currentTime","raceSchedule","forEach","horse","newPosition","position","Math","random","updateHorsePosition","horseId","id","requestAnimationFrame"],"sources":["/Users/aleynakoluk/Desktop/horse-racing-game/src/components/HorseRace.vue"],"sourcesContent":["<template>\n  <div class=\"race-results\">\n    <div v-for=\"(race, index) in raceSchedule\" :key=\"index\" class=\"race-section\">\n      <div class=\"race-track\">\n        <div class=\"lanes\">\n          <div class=\"lane-top\"></div>\n          <div v-for=\"lane in lanes\" :key=\"lane\" class=\"lane\">\n            <div class=\"lane-number\">{{ lane }}</div>\n            <div class=\"horses\">\n              <div\n                v-for=\"(horse, horseIndex) in horsesInLane(race, lane)\"\n                :key=\"horseIndex\"\n                class=\"horse\"\n                :style=\"{ left: horse.position + '%' }\" \n              >\n                <img :src=\"horse.image\" :alt=\"'horse ' + horse.id\">\n                <span :style=\"{ color: horse.color }\">Horse {{ horse.id }}</span>\n              </div>\n            </div>\n          </div>\n        </div>\n        <div class=\"finish-line\"></div>\n        <div class=\"finish-text\">FINISH</div>\n        <h5>{{ index + 1 }}.st Lap - {{ race.distance }}m</h5>\n      </div>\n    </div>\n    <button @click=\"startRace\">Start Race</button>\n  </div>\n</template>\n\n<script>\nimport { mapState, mapActions } from 'vuex';\n\nexport default {\n  name: 'HorseRace',\n  computed: {\n    ...mapState(['raceSchedule']),\n    lanes() {\n      return Array.from({ length: 10 }, (_, i) => i + 1);\n    }\n  },\n  mounted() {\n    this.generateHorses();\n  },\n  methods: {\n    horsesInLane(race, lane) {\n      return race.horses.slice((lane - 1) * 10, lane * 10);\n    },\n    async startRace() {\n      await this.generateHorses(); // Yarış başlamadan önce atları yeniden oluştur\n\n      const tickInterval = 100; // Her tıklamada geçen süre (ms)\n      const raceDuration = 5000; // Yarış süresi (ms)\n\n      const startTime = performance.now();\n      let progress = 0;\n\n      const animateRace = () => {\n        const currentTime = performance.now();\n        progress = currentTime - startTime;\n\n        if (progress < raceDuration) {\n          // Atların pozisyonunu güncelle\n          this.raceSchedule.forEach(race => {\n            race.horses.forEach(horse => {\n              const newPosition = horse.position + Math.random() * 10; // Atın rastgele hareketi\n              this.updateHorsePosition({ horseId: horse.id, position: newPosition });\n            });\n          });\n\n          // Animasyon devam ediyorsa bir sonraki frame için requestAnimationFrame çağır\n          requestAnimationFrame(animateRace);\n        } else {\n          // Yarış bittiğinde atların pozisyonlarını sıfırla\n          this.raceSchedule.forEach(race => {\n            race.horses.forEach(horse => {\n              this.updateHorsePosition({ horseId: horse.id, position: 0 });\n            });\n          });\n        }\n      };\n\n      // İlk frame'i başlat\n      requestAnimationFrame(animateRace);\n    },\n    ...mapActions(['generateHorses', 'updateHorsePosition']),\n  },\n};\n</script>\n\n<style scoped>\n.race-results {\n  display: flex;\n  flex-direction: column;\n  gap: 20px;\n  justify-content: flex-start;\n  align-items: center;\n  width: 550px;\n  height: 730px;\n  overflow-y: scroll;\n  padding-left: 10px;\n  border-radius: 4px;\n  overflow-x: hidden;\n}\n\n.race-section {\n  width: 390px;\n  border-radius: 4px;\n  padding-bottom: 70px;\n}\n\n.race-track {\n  position: relative;\n  width: 390px;\n  height: 510px;\n  margin-top: 20px;\n}\n\n.lane-top {\n  width: 100%;\n  height: 1px;\n  border-top: 1px dashed #000;\n}\n\n.lane {\n  position: relative;\n  width: 100%; /* Tam genişlikte olması için */\n  height: 50px;\n  border-bottom: 1px dashed #000;\n  display: flex; /* Flex container olarak ayarla */\n  justify-content: flex-start; /* İçeriği soldan başlat */\n  flex-direction: column; /* Atları alt alta sırala */\n  align-items: flex-start; /* Atları şeritlerin başında hizala */\n}\n\n.lane-number {\n  width: 50px;\n  height: 20px;\n  display: flex;\n  justify-content: center;\n  align-items: center;\n  background-color: green;\n  color: white;\n  font-weight: bold;\n  border: 1px solid white;\n  transform: rotate(-90deg);\n  position: absolute;\n  left: -20px;\n  top: 13px; /* Lane number'ların en üstte başlaması için */\n}\n\n.horses {\n  position: relative;\n  left: 0;\n  right: 0;\n  display: flex; /* Atları flex item olarak ayarla */\n  flex-direction: column; /* Atları alt alta sırala */\n}\n\n.horse {\n  position: relative;\n  height: 50px;\n  display: flex;\n  justify-content: center;\n  align-items: center;\n  color: white;\n  font-weight: bold;\n}\n\n.horse img {\n  width: 50px;\n  height: auto;\n  margin-right: 5px;\n  object-fit: contain;\n}\n\nh5 {\n  text-align: center;\n  color: red;\n  padding-bottom: 50px;\n}\n\n.finish-line {\n  position: absolute;\n  top: 0;\n  bottom: 0;\n  right: 0;\n  width: 4px;\n  height: 510px;\n  background-color: red;\n}\n\n.finish-text {\n  position: absolute;\n  left: 360px;\n  top: 510px;\n  color: red;\n  font-weight: bold;\n}\n</style>\n"],"mappings":"AA+BA,SAASA,QAAQ,EAAEC,UAAS,QAAS,MAAM;AAE3C,eAAe;EACbC,IAAI,EAAE,WAAW;EACjBC,QAAQ,EAAE;IACR,GAAGH,QAAQ,CAAC,CAAC,cAAc,CAAC,CAAC;IAC7BI,KAAKA,CAAA,EAAG;MACN,OAAOC,KAAK,CAACC,IAAI,CAAC;QAAEC,MAAM,EAAE;MAAG,CAAC,EAAE,CAACC,CAAC,EAAEC,CAAC,KAAKA,CAAA,GAAI,CAAC,CAAC;IACpD;EACF,CAAC;EACDC,OAAOA,CAAA,EAAG;IACR,IAAI,CAACC,cAAc,CAAC,CAAC;EACvB,CAAC;EACDC,OAAO,EAAE;IACPC,YAAYA,CAACC,IAAI,EAAEC,IAAI,EAAE;MACvB,OAAOD,IAAI,CAACE,MAAM,CAACC,KAAK,CAAC,CAACF,IAAG,GAAI,CAAC,IAAI,EAAE,EAAEA,IAAG,GAAI,EAAE,CAAC;IACtD,CAAC;IACD,MAAMG,SAASA,CAAA,EAAG;MAChB,MAAM,IAAI,CAACP,cAAc,CAAC,CAAC,EAAE;;MAE7B,MAAMQ,YAAW,GAAI,GAAG,EAAE;MAC1B,MAAMC,YAAW,GAAI,IAAI,EAAE;;MAE3B,MAAMC,SAAQ,GAAIC,WAAW,CAACC,GAAG,CAAC,CAAC;MACnC,IAAIC,QAAO,GAAI,CAAC;MAEhB,MAAMC,WAAU,GAAIA,CAAA,KAAM;QACxB,MAAMC,WAAU,GAAIJ,WAAW,CAACC,GAAG,CAAC,CAAC;QACrCC,QAAO,GAAIE,WAAU,GAAIL,SAAS;QAElC,IAAIG,QAAO,GAAIJ,YAAY,EAAE;UAC3B;UACA,IAAI,CAACO,YAAY,CAACC,OAAO,CAACd,IAAG,IAAK;YAChCA,IAAI,CAACE,MAAM,CAACY,OAAO,CAACC,KAAI,IAAK;cAC3B,MAAMC,WAAU,GAAID,KAAK,CAACE,QAAO,GAAIC,IAAI,CAACC,MAAM,CAAC,IAAI,EAAE,EAAE;cACzD,IAAI,CAACC,mBAAmB,CAAC;gBAAEC,OAAO,EAAEN,KAAK,CAACO,EAAE;gBAAEL,QAAQ,EAAED;cAAY,CAAC,CAAC;YACxE,CAAC,CAAC;UACJ,CAAC,CAAC;;UAEF;UACAO,qBAAqB,CAACZ,WAAW,CAAC;QACpC,OAAO;UACL;UACA,IAAI,CAACE,YAAY,CAACC,OAAO,CAACd,IAAG,IAAK;YAChCA,IAAI,CAACE,MAAM,CAACY,OAAO,CAACC,KAAI,IAAK;cAC3B,IAAI,CAACK,mBAAmB,CAAC;gBAAEC,OAAO,EAAEN,KAAK,CAACO,EAAE;gBAAEL,QAAQ,EAAE;cAAE,CAAC,CAAC;YAC9D,CAAC,CAAC;UACJ,CAAC,CAAC;QACJ;MACF,CAAC;;MAED;MACAM,qBAAqB,CAACZ,WAAW,CAAC;IACpC,CAAC;IACD,GAAGxB,UAAU,CAAC,CAAC,gBAAgB,EAAE,qBAAqB,CAAC;EACzD;AACF,CAAC","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}