{"ast":null,"code":"import \"core-js/modules/es.array.push.js\";\nimport \"core-js/modules/esnext.set.difference.v2.js\";\nimport \"core-js/modules/esnext.set.intersection.v2.js\";\nimport \"core-js/modules/esnext.set.is-disjoint-from.v2.js\";\nimport \"core-js/modules/esnext.set.is-subset-of.v2.js\";\nimport \"core-js/modules/esnext.set.is-superset-of.v2.js\";\nimport \"core-js/modules/esnext.set.symmetric-difference.v2.js\";\nimport \"core-js/modules/esnext.set.union.v2.js\";\nimport { createStore } from 'vuex';\n\n// Atları oluşturacak fonksiyon\nfunction generateHorses() {\n  const horses = [];\n  for (let i = 1; i <= 20; i++) {\n    horses.push({\n      id: i,\n      color: getRandomColor(),\n      condition: Math.floor(Math.random() * 100) + 1,\n      position: 0,\n      initialPosition: 0,\n      // Başlangıç konumu eklendi\n      image: require(`@/assets/horse${i}.png`) // ` karakteri eklenmiş\n    });\n  }\n  return horses;\n}\n\n// Rastgele renk oluşturacak fonksiyon\nfunction getRandomColor() {\n  const letters = '0123456789ABCDEF';\n  let color = '#';\n  for (let i = 0; i < 6; i++) {\n    color += letters[Math.floor(Math.random() * 16)];\n  }\n  return color;\n}\n\n// Yerel depolama anahtarları\nconst LOCAL_STORAGE_KEY = 'horse-racing-game';\n\n// Yarış programını oluşturacak fonksiyon\nfunction generateRaceSchedule(horses) {\n  const distances = [1200, 1400, 1600, 1800, 2000, 2200];\n  const schedule = distances.map(distance => {\n    const selectedHorses = [];\n    const horseIds = new Set();\n\n    // 10 at seçmek için döngü\n    for (let i = 1; i <= 10; i++) {\n      let horse;\n      do {\n        horse = horses[Math.floor(Math.random() * horses.length)];\n      } while (horseIds.has(horse.id));\n      selectedHorses.push(horse);\n      horseIds.add(horse.id);\n    }\n    return {\n      distance,\n      horses: selectedHorses\n    };\n  });\n  return schedule;\n}\nexport default createStore({\n  state: {\n    horses: [],\n    raceSchedule: [],\n    raceResults: [],\n    racing: false,\n    // Yarış durumu eklendi\n    raceTimeouts: [] // Timeout fonksiyonlarını tutacak dizi\n  },\n  mutations: {\n    setHorses(state, horses) {\n      state.horses = horses;\n    },\n    setRaceSchedule(state, schedule) {\n      state.raceSchedule = schedule;\n    },\n    updateHorsePosition(state, {\n      horseId,\n      position\n    }) {\n      const horse = state.horses.find(h => h.id === horseId);\n      if (horse) {\n        horse.position = position;\n      }\n    },\n    resetHorsePositions(state) {\n      state.horses.forEach(horse => {\n        horse.position = horse.initialPosition;\n      });\n    },\n    addRaceResult(state, result) {\n      state.raceResults.push(result);\n    },\n    clearRaceResults(state) {\n      state.raceResults = [];\n    },\n    setRacing(state, status) {\n      state.racing = status;\n    },\n    addRaceTimeout(state, timeoutId) {\n      state.raceTimeouts.push(timeoutId);\n    },\n    clearRaceTimeouts(state) {\n      state.raceTimeouts.forEach(timeoutId => {\n        clearTimeout(timeoutId);\n      });\n      state.raceTimeouts = [];\n    }\n  },\n  actions: {\n    initializeGame({\n      commit,\n      dispatch\n    }) {\n      // Oyun başlatıldığında atları oluştur ve yarış programını hazırla\n      commit('resetHorsePositions'); // Atların başlangıç pozisyonlarını sıfırla\n      dispatch('generateHorses');\n    },\n    generateHorses({\n      commit\n    }) {\n      // Önce yerel depolamadan atları al\n      const storedHorses = JSON.parse(localStorage.getItem(LOCAL_STORAGE_KEY));\n      if (storedHorses) {\n        commit('setHorses', storedHorses);\n      } else {\n        // Yerel depolamada atlar yoksa yeni atlar oluştur\n        const horses = generateHorses();\n        commit('setHorses', horses);\n        // Oluşturulan atları yerel depolamaya kaydet\n        localStorage.setItem(LOCAL_STORAGE_KEY, JSON.stringify(horses));\n      }\n    },\n    startRace({\n      commit,\n      state\n    }) {\n      if (state.racing) {\n        return; // Eğer zaten yarış halindeyse bir şey yapma\n      }\n      commit('clearRaceResults');\n      commit('resetHorsePositions'); // Atların başlangıç pozisyonlarını sıfırla\n      commit('setRacing', true); // Yarış başladı olarak işaretle\n      const schedule = generateRaceSchedule(state.horses);\n      commit('setRaceSchedule', schedule);\n      schedule.forEach((race, index) => {\n        const timeoutId = setTimeout(() => {\n          if (!state.racing) {\n            return; // Yarış durduysa bir şey yapma\n          }\n          race.horses.forEach(horse => {\n            const newPosition = horse.position + Math.random() * 10;\n            commit('updateHorsePosition', {\n              horseId: horse.id,\n              position: newPosition\n            });\n          });\n          const winner = race.horses.reduce((prev, current) => prev.position > current.position ? prev : current);\n          const result = `Winner: Horse ${winner.id}`;\n          commit('addRaceResult', result);\n        }, index * 5000); // Her yarışı 5 saniye arayla başlatır\n        commit('addRaceTimeout', timeoutId); // Timeout id'sini sakla\n      });\n\n      // Yarışlar tamamlandıktan sonra yarış bitti olarak işaretle\n      const finalTimeoutId = setTimeout(() => {\n        commit('setRacing', false);\n        commit('clearRaceTimeouts'); // Tüm timeout'ları temizle\n      }, schedule.length * 5000);\n      commit('addRaceTimeout', finalTimeoutId); // Son timeout id'sini sakla\n    }\n  }\n});","map":{"version":3,"names":["createStore","generateHorses","horses","i","push","id","color","getRandomColor","condition","Math","floor","random","position","initialPosition","image","require","letters","LOCAL_STORAGE_KEY","generateRaceSchedule","distances","schedule","map","distance","selectedHorses","horseIds","Set","horse","length","has","add","state","raceSchedule","raceResults","racing","raceTimeouts","mutations","setHorses","setRaceSchedule","updateHorsePosition","horseId","find","h","resetHorsePositions","forEach","addRaceResult","result","clearRaceResults","setRacing","status","addRaceTimeout","timeoutId","clearRaceTimeouts","clearTimeout","actions","initializeGame","commit","dispatch","storedHorses","JSON","parse","localStorage","getItem","setItem","stringify","startRace","race","index","setTimeout","newPosition","winner","reduce","prev","current","finalTimeoutId"],"sources":["/Users/aleynakoluk/Desktop/horse-racing-game/src/store/index.js"],"sourcesContent":["import { createStore } from 'vuex';\n\n// Atları oluşturacak fonksiyon\nfunction generateHorses() {\n  const horses = [];\n  for (let i = 1; i <= 20; i++) {\n    horses.push({\n      id: i,\n      color: getRandomColor(),\n      condition: Math.floor(Math.random() * 100) + 1,\n      position: 0,\n      initialPosition: 0, // Başlangıç konumu eklendi\n      image: require(`@/assets/horse${i}.png`), // ` karakteri eklenmiş\n    });\n  }\n  return horses;\n}\n\n// Rastgele renk oluşturacak fonksiyon\nfunction getRandomColor() {\n  const letters = '0123456789ABCDEF';\n  let color = '#';\n  for (let i = 0; i < 6; i++) {\n    color += letters[Math.floor(Math.random() * 16)];\n  }\n  return color;\n}\n\n// Yerel depolama anahtarları\nconst LOCAL_STORAGE_KEY = 'horse-racing-game';\n\n// Yarış programını oluşturacak fonksiyon\nfunction generateRaceSchedule(horses) {\n  const distances = [1200, 1400, 1600, 1800, 2000, 2200];\n  const schedule = distances.map(distance => {\n    const selectedHorses = [];\n    const horseIds = new Set();\n\n    // 10 at seçmek için döngü\n    for (let i = 1; i <= 10; i++) {\n      let horse;\n      do {\n        horse = horses[Math.floor(Math.random() * horses.length)];\n      } while (horseIds.has(horse.id));\n      selectedHorses.push(horse);\n      horseIds.add(horse.id);\n    }\n\n    return {\n      distance,\n      horses: selectedHorses,\n    };\n  });\n  return schedule;\n}\n\nexport default createStore({\n  state: {\n    horses: [],\n    raceSchedule: [],\n    raceResults: [],\n    racing: false, // Yarış durumu eklendi\n    raceTimeouts: [], // Timeout fonksiyonlarını tutacak dizi\n  },\n  mutations: {\n    setHorses(state, horses) {\n      state.horses = horses;\n    },\n    setRaceSchedule(state, schedule) {\n      state.raceSchedule = schedule;\n    },\n    updateHorsePosition(state, { horseId, position }) {\n      const horse = state.horses.find(h => h.id === horseId);\n      if (horse) {\n        horse.position = position;\n      }\n    },\n    resetHorsePositions(state) {\n      state.horses.forEach(horse => {\n        horse.position = horse.initialPosition;\n      });\n    },\n    addRaceResult(state, result) {\n      state.raceResults.push(result);\n    },\n    clearRaceResults(state) {\n      state.raceResults = [];\n    },\n    setRacing(state, status) {\n      state.racing = status;\n    },\n    addRaceTimeout(state, timeoutId) {\n      state.raceTimeouts.push(timeoutId);\n    },\n    clearRaceTimeouts(state) {\n      state.raceTimeouts.forEach(timeoutId => {\n        clearTimeout(timeoutId);\n      });\n      state.raceTimeouts = [];\n    },\n  },\n  actions: {\n    initializeGame({ commit, dispatch }) {\n      // Oyun başlatıldığında atları oluştur ve yarış programını hazırla\n      commit('resetHorsePositions'); // Atların başlangıç pozisyonlarını sıfırla\n      dispatch('generateHorses');\n    },\n    generateHorses({ commit }) {\n      // Önce yerel depolamadan atları al\n      const storedHorses = JSON.parse(localStorage.getItem(LOCAL_STORAGE_KEY));\n      if (storedHorses) {\n        commit('setHorses', storedHorses);\n      } else {\n        // Yerel depolamada atlar yoksa yeni atlar oluştur\n        const horses = generateHorses();\n        commit('setHorses', horses);\n        // Oluşturulan atları yerel depolamaya kaydet\n        localStorage.setItem(LOCAL_STORAGE_KEY, JSON.stringify(horses));\n      }\n    },\n    startRace({ commit, state }) {\n      if (state.racing) {\n        return; // Eğer zaten yarış halindeyse bir şey yapma\n      }\n      commit('clearRaceResults');\n      commit('resetHorsePositions'); // Atların başlangıç pozisyonlarını sıfırla\n      commit('setRacing', true); // Yarış başladı olarak işaretle\n      const schedule = generateRaceSchedule(state.horses);\n      commit('setRaceSchedule', schedule);\n\n      schedule.forEach((race, index) => {\n        const timeoutId = setTimeout(() => {\n          if (!state.racing) {\n            return; // Yarış durduysa bir şey yapma\n          }\n          race.horses.forEach(horse => {\n            const newPosition = horse.position + Math.random() * 10;\n            commit('updateHorsePosition', { horseId: horse.id, position: newPosition });\n          });\n          const winner = race.horses.reduce((prev, current) => (prev.position > current.position) ? prev : current);\n          const result = `Winner: Horse ${winner.id}`;\n          commit('addRaceResult', result);\n        }, index * 5000); // Her yarışı 5 saniye arayla başlatır\n        commit('addRaceTimeout', timeoutId); // Timeout id'sini sakla\n      });\n\n      // Yarışlar tamamlandıktan sonra yarış bitti olarak işaretle\n      const finalTimeoutId = setTimeout(() => {\n        commit('setRacing', false);\n        commit('clearRaceTimeouts'); // Tüm timeout'ları temizle\n      }, schedule.length * 5000);\n      commit('addRaceTimeout', finalTimeoutId); // Son timeout id'sini sakla\n    },\n  },\n});\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}