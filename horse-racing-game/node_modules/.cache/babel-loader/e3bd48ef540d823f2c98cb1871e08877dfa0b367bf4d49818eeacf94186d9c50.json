{"ast":null,"code":"import \"core-js/modules/es.array.push.js\";\nimport \"core-js/modules/esnext.set.difference.v2.js\";\nimport \"core-js/modules/esnext.set.intersection.v2.js\";\nimport \"core-js/modules/esnext.set.is-disjoint-from.v2.js\";\nimport \"core-js/modules/esnext.set.is-subset-of.v2.js\";\nimport \"core-js/modules/esnext.set.is-superset-of.v2.js\";\nimport \"core-js/modules/esnext.set.symmetric-difference.v2.js\";\nimport \"core-js/modules/esnext.set.union.v2.js\";\nimport { createStore } from 'vuex';\nconst LOCAL_STORAGE_KEY = 'horse-racing-game';\nexport default createStore({\n  state: {\n    horses: [],\n    raceSchedule: []\n  },\n  mutations: {\n    setHorses(state, horses) {\n      state.horses = horses;\n    },\n    setRaceSchedule(state, schedule) {\n      state.raceSchedule = schedule;\n    },\n    updateHorsePosition(state, {\n      horseId,\n      position\n    }) {\n      const horse = state.horses.find(h => h.id === horseId);\n      if (horse) {\n        horse.position = position;\n      }\n    },\n    resetHorsePositions(state) {\n      state.horses.forEach(horse => {\n        horse.position = 0;\n      });\n    }\n  },\n  actions: {\n    async generateHorses({\n      commit\n    }) {\n      let storedHorses = JSON.parse(localStorage.getItem(LOCAL_STORAGE_KEY));\n      if (!storedHorses) {\n        storedHorses = generateHorses();\n        localStorage.setItem(LOCAL_STORAGE_KEY, JSON.stringify(storedHorses));\n      }\n      commit('setHorses', storedHorses);\n      const schedule = generateRaceSchedule(storedHorses);\n      commit('setRaceSchedule', schedule);\n    },\n    async startRace({\n      commit,\n      state\n    }) {\n      commit('resetHorsePositions');\n\n      // Koşma animasyonu başlat\n      const raceDistance = 1000; // Koşu mesafesi, bu değeri ihtiyaçlarınıza göre ayarlayın\n      const animationDuration = 10000; // Animasyon süresi (ms), bu değeri ihtiyaçlarınıza göre ayarlayın\n      const frameRate = 60; // Animasyonun saniyedeki kare sayısı\n\n      const frames = animationDuration / 1000 * frameRate;\n      const interval = animationDuration / frames;\n      const animate = () => {\n        state.horses.forEach(horse => {\n          if (horse.position < raceDistance) {\n            const speed = horse.condition / 10; // Koşu hızını belirleyen faktör, bu değeri ihtiyaçlarınıza göre ayarlayın\n            horse.position += speed;\n            if (horse.position > raceDistance) {\n              horse.position = raceDistance; // Atın pozisyonu yarış mesafesini geçmemeli\n            }\n          }\n        });\n        commit('setHorses', [...state.horses]); // Atların güncellenmiş pozisyonlarını commit ile güncelle\n\n        if (state.horses.some(horse => horse.position < raceDistance)) {\n          setTimeout(animate, interval); // Animasyonu tekrar et\n        }\n      };\n      animate();\n    }\n  }\n});\nfunction generateHorses() {\n  const horses = [];\n  for (let i = 1; i <= 20; i++) {\n    horses.push({\n      id: i,\n      color: getRandomColor(),\n      condition: Math.floor(Math.random() * 100) + 1,\n      position: 0,\n      image: require(`@/assets/horse${i}.png`)\n    });\n  }\n  return horses;\n}\nfunction getRandomColor() {\n  const letters = '0123456789ABCDEF';\n  let color = '#';\n  for (let i = 0; i < 6; i++) {\n    color += letters[Math.floor(Math.random() * 16)];\n  }\n  return color;\n}\nfunction generateRaceSchedule(horses) {\n  const distances = [1200, 1400, 1600, 1800, 2000, 2200];\n  const schedule = distances.map(distance => {\n    const selectedHorses = [];\n    const horseIds = new Set();\n    for (let i = 1; i <= 10; i++) {\n      let horse;\n      do {\n        horse = horses[Math.floor(Math.random() * horses.length)];\n      } while (horseIds.has(horse.id));\n      selectedHorses.push(horse);\n      horseIds.add(horse.id);\n    }\n    return {\n      distance,\n      horses: selectedHorses\n    };\n  });\n  return schedule;\n}","map":{"version":3,"names":["createStore","LOCAL_STORAGE_KEY","state","horses","raceSchedule","mutations","setHorses","setRaceSchedule","schedule","updateHorsePosition","horseId","position","horse","find","h","id","resetHorsePositions","forEach","actions","generateHorses","commit","storedHorses","JSON","parse","localStorage","getItem","setItem","stringify","generateRaceSchedule","startRace","raceDistance","animationDuration","frameRate","frames","interval","animate","speed","condition","some","setTimeout","i","push","color","getRandomColor","Math","floor","random","image","require","letters","distances","map","distance","selectedHorses","horseIds","Set","length","has","add"],"sources":["/Users/aleynakoluk/Desktop/horse-racing-game/src/store/index.js"],"sourcesContent":["import { createStore } from 'vuex';\n\nconst LOCAL_STORAGE_KEY = 'horse-racing-game';\n\nexport default createStore({\n  state: {\n    horses: [],\n    raceSchedule: [],\n  },\n  mutations: {\n    setHorses(state, horses) {\n      state.horses = horses;\n    },\n    setRaceSchedule(state, schedule) {\n      state.raceSchedule = schedule;\n    },\n    updateHorsePosition(state, { horseId, position }) {\n      const horse = state.horses.find(h => h.id === horseId);\n      if (horse) {\n        horse.position = position;\n      }\n    },\n    resetHorsePositions(state) {\n      state.horses.forEach(horse => {\n        horse.position = 0;\n      });\n    },\n  },\n  actions: {\n    async generateHorses({ commit }) {\n      let storedHorses = JSON.parse(localStorage.getItem(LOCAL_STORAGE_KEY));\n      if (!storedHorses) {\n        storedHorses = generateHorses();\n        localStorage.setItem(LOCAL_STORAGE_KEY, JSON.stringify(storedHorses));\n      }\n      commit('setHorses', storedHorses);\n      const schedule = generateRaceSchedule(storedHorses);\n      commit('setRaceSchedule', schedule);\n    },\n    async startRace({ commit, state }) {\n      commit('resetHorsePositions');\n\n      // Koşma animasyonu başlat\n      const raceDistance = 1000; // Koşu mesafesi, bu değeri ihtiyaçlarınıza göre ayarlayın\n      const animationDuration = 10000; // Animasyon süresi (ms), bu değeri ihtiyaçlarınıza göre ayarlayın\n      const frameRate = 60; // Animasyonun saniyedeki kare sayısı\n\n      const frames = (animationDuration / 1000) * frameRate;\n      const interval = animationDuration / frames;\n\n      const animate = () => {\n        state.horses.forEach(horse => {\n          if (horse.position < raceDistance) {\n            const speed = horse.condition / 10; // Koşu hızını belirleyen faktör, bu değeri ihtiyaçlarınıza göre ayarlayın\n            horse.position += speed;\n            if (horse.position > raceDistance) {\n              horse.position = raceDistance; // Atın pozisyonu yarış mesafesini geçmemeli\n            }\n          }\n        });\n        commit('setHorses', [...state.horses]); // Atların güncellenmiş pozisyonlarını commit ile güncelle\n\n        if (state.horses.some(horse => horse.position < raceDistance)) {\n          setTimeout(animate, interval); // Animasyonu tekrar et\n        }\n      };\n\n      animate();\n    },\n  },\n});\n\nfunction generateHorses() {\n  const horses = [];\n  for (let i = 1; i <= 20; i++) {\n    horses.push({\n      id: i,\n      color: getRandomColor(),\n      condition: Math.floor(Math.random() * 100) + 1,\n      position: 0,\n      image: require(`@/assets/horse${i}.png`),\n    });\n  }\n  return horses;\n}\n\nfunction getRandomColor() {\n  const letters = '0123456789ABCDEF';\n  let color = '#';\n  for (let i = 0; i < 6; i++) {\n    color += letters[Math.floor(Math.random() * 16)];\n  }\n  return color;\n}\n\nfunction generateRaceSchedule(horses) {\n  const distances = [1200, 1400, 1600, 1800, 2000, 2200];\n  const schedule = distances.map(distance => {\n    const selectedHorses = [];\n    const horseIds = new Set();\n\n    for (let i = 1; i <= 10; i++) {\n      let horse;\n      do {\n        horse = horses[Math.floor(Math.random() * horses.length)];\n      } while (horseIds.has(horse.id));\n      selectedHorses.push(horse);\n      horseIds.add(horse.id);\n    }\n\n    return {\n      distance,\n      horses: selectedHorses,\n    };\n  });\n  return schedule;\n}\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}