{"ast":null,"code":"import \"core-js/modules/es.array.push.js\";\nimport \"core-js/modules/esnext.set.difference.v2.js\";\nimport \"core-js/modules/esnext.set.intersection.v2.js\";\nimport \"core-js/modules/esnext.set.is-disjoint-from.v2.js\";\nimport \"core-js/modules/esnext.set.is-subset-of.v2.js\";\nimport \"core-js/modules/esnext.set.is-superset-of.v2.js\";\nimport \"core-js/modules/esnext.set.symmetric-difference.v2.js\";\nimport \"core-js/modules/esnext.set.union.v2.js\";\nimport { createStore } from 'vuex';\nconst COLOR_STORAGE_KEY = 'horses-colors';\nexport default createStore({\n  state: {\n    horses: [],\n    // List of horses\n    raceSchedule: [],\n    // Race schedule\n    raceInterval: null // Race interval\n  },\n  mutations: {\n    setHorses(state, horses) {\n      state.horses = horses; // Set horses to state\n    },\n    setRaceSchedule(state, schedule) {\n      state.raceSchedule = schedule; // Set race schedule to state\n    },\n    updateHorsePosition(state, {\n      horseId,\n      position\n    }) {\n      // Update position of a specific horse\n      const horse = state.horses.find(h => h.id === horseId);\n      if (horse) {\n        horse.position = position;\n      }\n    },\n    resetHorsePositions(state) {\n      // Reset positions of all horses\n      state.horses.forEach(horse => {\n        horse.position = 0;\n      });\n    },\n    SET_RACE_INTERVAL(state, interval) {\n      state.raceInterval = interval; // Set race interval to state\n    },\n    CLEAR_RACE_INTERVAL(state) {\n      // Clear race interval\n      if (state.raceInterval) {\n        clearInterval(state.raceInterval);\n        state.raceInterval = null;\n      }\n    }\n  },\n  actions: {\n    async generateHorses({\n      commit\n    }) {\n      // Generate horses and load from local storage\n      let storedHorses = JSON.parse(localStorage.getItem(LOCAL_STORAGE_KEY));\n      let storedColors = JSON.parse(localStorage.getItem(COLOR_STORAGE_KEY));\n      if (!storedHorses || !storedColors) {\n        storedHorses = generateHorses(); // Generate new horses\n        localStorage.setItem(COLOR_STORAGE_KEY, JSON.stringify(storedHorses.map(horse => horse.color))); // Save colors to local storage\n      }\n      commit('setHorses', storedHorses); // Save horses to state\n      const schedule = generateRaceSchedule(storedHorses); // Generate race schedule\n      commit('setRaceSchedule', schedule); // Save race schedule to state\n    },\n    async startRace({\n      commit,\n      state\n    }) {\n      // Start the race\n      commit('resetHorsePositions'); // Reset horse positions\n      commit('CLEAR_RACE_INTERVAL'); // Clear current race interval\n\n      // Determine horse speeds based on their conditions\n      const horseSpeeds = state.horses.map(horse => calculateSpeed(horse.condition));\n      const raceInterval = setInterval(() => {\n        state.horses.forEach((horse, index) => {\n          const speed = horseSpeeds[index];\n          let newPosition = horse.position + speed;\n          if (newPosition > 605) {\n            newPosition = 605; // Limit maximum position of horses\n          }\n          commit('updateHorsePosition', {\n            horseId: horse.id,\n            position: newPosition\n          }); // Update horse position\n          console.log(`Horse ${horse.id} has moved ${newPosition.toFixed(2)} pixels.`);\n        });\n        const allHorsesFinished = state.horses.every(horse => horse.position >= 605);\n        if (allHorsesFinished) {\n          commit('CLEAR_RACE_INTERVAL'); // Stop the race when all horses reach the finish line\n          console.log('Race finished.');\n        }\n      }, 100);\n      commit('SET_RACE_INTERVAL', raceInterval); // Save race interval to state\n    },\n    updateHorsePosition({\n      commit\n    }, {\n      horseId,\n      position\n    }) {\n      // Update position of a specific horse\n      commit('updateHorsePosition', {\n        horseId,\n        position\n      });\n    }\n  }\n});\nfunction generateHorses() {\n  const horses = [];\n  const colors = ['Red', 'Green', 'Blue', 'Yellow', 'Purple', 'Orange', 'Pink', 'Brown', 'Cyan', 'Magenta', 'Lime', 'Olive', 'Navy', 'Teal', 'Maroon', 'Silver', 'Gold', 'Indigo', 'Violet', 'Crimson'];\n  for (let i = 1; i <= 20; i++) {\n    const color = colors.splice(Math.floor(Math.random() * colors.length), 1)[0]; // Select a random color\n    horses.push({\n      id: i,\n      color: color,\n      condition: Math.floor(Math.random() * 100) + 1,\n      // Generate a random condition value between 1 and 100\n      position: 0,\n      image: require(`@/assets/horse${i}.png`) // For horse image\n    });\n  }\n  return horses;\n}\nfunction generateRaceSchedule(horses) {\n  const distances = [1200, 1400, 1600, 1800, 2000, 2200]; // Define race distances\n  const schedule = distances.map(distance => {\n    const selectedHorses = [];\n    const horseIds = new Set();\n    for (let i = 1; i <= 10; i++) {\n      let horse;\n      do {\n        horse = horses[Math.floor(Math.random() * horses.length)]; // Select a random horse\n      } while (horseIds.has(horse.id)); // Prevent selecting the same horse again\n      selectedHorses.push(horse);\n      horseIds.add(horse.id);\n    }\n    return {\n      distance,\n      horses: selectedHorses // Horses participating in the race\n    };\n  });\n  return schedule;\n}\nfunction calculateSpeed(condition) {\n  return Math.round(condition / 2); // Calculate horse speed based on condition properties\n}","map":{"version":3,"names":["createStore","COLOR_STORAGE_KEY","state","horses","raceSchedule","raceInterval","mutations","setHorses","setRaceSchedule","schedule","updateHorsePosition","horseId","position","horse","find","h","id","resetHorsePositions","forEach","SET_RACE_INTERVAL","interval","CLEAR_RACE_INTERVAL","clearInterval","actions","generateHorses","commit","storedHorses","JSON","parse","localStorage","getItem","LOCAL_STORAGE_KEY","storedColors","setItem","stringify","map","color","generateRaceSchedule","startRace","horseSpeeds","calculateSpeed","condition","setInterval","index","speed","newPosition","console","log","toFixed","allHorsesFinished","every","colors","i","splice","Math","floor","random","length","push","image","require","distances","distance","selectedHorses","horseIds","Set","has","add","round"],"sources":["/Users/aleynakoluk/Desktop/horse-racing-game/src/store/index.js"],"sourcesContent":["import { createStore } from 'vuex';\n\nconst COLOR_STORAGE_KEY = 'horses-colors';\n\nexport default createStore({\n  state: {\n    horses: [], // List of horses\n    raceSchedule: [], // Race schedule\n    raceInterval: null, // Race interval\n  },\n  mutations: {\n    setHorses(state, horses) {\n      state.horses = horses; // Set horses to state\n    },\n    setRaceSchedule(state, schedule) {\n      state.raceSchedule = schedule; // Set race schedule to state\n    },\n    updateHorsePosition(state, { horseId, position }) {\n      // Update position of a specific horse\n      const horse = state.horses.find(h => h.id === horseId);\n      if (horse) {\n        horse.position = position;\n      }\n    },\n    resetHorsePositions(state) {\n      // Reset positions of all horses\n      state.horses.forEach(horse => {\n        horse.position = 0;\n      });\n    },\n    SET_RACE_INTERVAL(state, interval) {\n      state.raceInterval = interval; // Set race interval to state\n    },\n    CLEAR_RACE_INTERVAL(state) {\n      // Clear race interval\n      if (state.raceInterval) {\n        clearInterval(state.raceInterval);\n        state.raceInterval = null;\n      }\n    },\n  },\n  actions: {\n    async generateHorses({ commit }) {\n      // Generate horses and load from local storage\n      let storedHorses = JSON.parse(localStorage.getItem(LOCAL_STORAGE_KEY));\n      let storedColors = JSON.parse(localStorage.getItem(COLOR_STORAGE_KEY));\n      \n      if (!storedHorses || !storedColors) {\n        storedHorses = generateHorses(); // Generate new horses\n        localStorage.setItem(COLOR_STORAGE_KEY, JSON.stringify(storedHorses.map(horse => horse.color))); // Save colors to local storage\n      }\n      commit('setHorses', storedHorses); // Save horses to state\n      const schedule = generateRaceSchedule(storedHorses); // Generate race schedule\n      commit('setRaceSchedule', schedule); // Save race schedule to state\n    },\n    async startRace({ commit, state }) {\n      // Start the race\n      commit('resetHorsePositions'); // Reset horse positions\n      commit('CLEAR_RACE_INTERVAL'); // Clear current race interval\n\n      // Determine horse speeds based on their conditions\n      const horseSpeeds = state.horses.map(horse => calculateSpeed(horse.condition));\n\n      const raceInterval = setInterval(() => {\n        state.horses.forEach((horse, index) => {\n          const speed = horseSpeeds[index];\n          let newPosition = horse.position + speed;\n\n          if (newPosition > 605) {\n            newPosition = 605; // Limit maximum position of horses\n          }\n\n          commit('updateHorsePosition', { horseId: horse.id, position: newPosition }); // Update horse position\n          console.log(`Horse ${horse.id} has moved ${newPosition.toFixed(2)} pixels.`);\n        });\n\n        const allHorsesFinished = state.horses.every(horse => horse.position >= 605);\n        if (allHorsesFinished) {\n          commit('CLEAR_RACE_INTERVAL'); // Stop the race when all horses reach the finish line\n          console.log('Race finished.');\n        }\n      }, 100);\n\n      commit('SET_RACE_INTERVAL', raceInterval); // Save race interval to state\n    },\n    updateHorsePosition({ commit }, { horseId, position }) {\n      // Update position of a specific horse\n      commit('updateHorsePosition', { horseId, position });\n    },\n  },\n});\n\nfunction generateHorses() {\n  const horses = [];\n  const colors = [\n    'Red', 'Green', 'Blue', 'Yellow', 'Purple', 'Orange', 'Pink', 'Brown', 'Cyan', 'Magenta',\n    'Lime', 'Olive', 'Navy', 'Teal', 'Maroon', 'Silver', 'Gold', 'Indigo', 'Violet', 'Crimson'\n  ];\n\n  for (let i = 1; i <= 20; i++) {\n    const color = colors.splice(Math.floor(Math.random() * colors.length), 1)[0]; // Select a random color\n    horses.push({\n      id: i,\n      color: color,\n      condition: Math.floor(Math.random() * 100) + 1, // Generate a random condition value between 1 and 100\n      position: 0,\n      image: require(`@/assets/horse${i}.png`), // For horse image\n    });\n  }\n  return horses;\n}\n\nfunction generateRaceSchedule(horses) {\n  const distances = [1200, 1400, 1600, 1800, 2000, 2200]; // Define race distances\n  const schedule = distances.map(distance => {\n    const selectedHorses = [];\n    const horseIds = new Set();\n\n    for (let i = 1; i <= 10; i++) {\n      let horse;\n      do {\n        horse = horses[Math.floor(Math.random() * horses.length)]; // Select a random horse\n      } while (horseIds.has(horse.id)); // Prevent selecting the same horse again\n      selectedHorses.push(horse);\n      horseIds.add(horse.id);\n    }\n\n    return {\n      distance,\n      horses: selectedHorses, // Horses participating in the race\n    };\n  });\n  return schedule;\n}\n\nfunction calculateSpeed(condition) {\n  return Math.round(condition / 2); // Calculate horse speed based on condition properties\n}\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}