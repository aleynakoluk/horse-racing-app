{"ast":null,"code":"import \"core-js/modules/es.array.push.js\";\nimport { createStore } from 'vuex';\n\n// Function to generate horses\nfunction generateHorses() {\n  const horses = [];\n  for (let i = 1; i <= 20; i++) {\n    horses.push({\n      id: i,\n      color: getRandomColor(),\n      condition: Math.floor(Math.random() * 100) + 1,\n      position: 0,\n      image: require(`@/assets/horse${i}.png`)\n    });\n  }\n  return horses;\n}\n\n// Function to generate random color\nfunction getRandomColor() {\n  const letters = '0123456789ABCDEF';\n  let color = '#';\n  for (let i = 0; i < 6; i++) {\n    color += letters[Math.floor(Math.random() * 16)];\n  }\n  return color;\n}\n\n// Local storage key\nconst LOCAL_STORAGE_KEY = 'horse-racing-game';\n\n// Function to retrieve horses from local storage\nfunction getStoredHorses() {\n  return JSON.parse(localStorage.getItem(LOCAL_STORAGE_KEY)) || [];\n}\n\n// Function to save horses to local storage\nfunction saveHorsesToLocalStorage(horses) {\n  localStorage.setItem(LOCAL_STORAGE_KEY, JSON.stringify(horses));\n}\nexport default createStore({\n  state: {\n    horses: [],\n    raceSchedule: [],\n    raceResults: []\n  },\n  mutations: {\n    setHorses(state, horses) {\n      state.horses = horses;\n    },\n    setRaceSchedule(state, schedule) {\n      state.raceSchedule = schedule;\n    },\n    updateHorsePosition(state, {\n      horseId,\n      position\n    }) {\n      const horse = state.horses.find(h => h.id === horseId);\n      if (horse) {\n        horse.position = position;\n      }\n      saveHorsesToLocalStorage(state.horses); // Save horses after position update\n    },\n    addRaceResult(state, result) {\n      state.raceResults.push(result);\n    },\n    clearRaceResults(state) {\n      state.raceResults = [];\n    }\n  },\n  actions: {\n    initializeGame({\n      commit\n    }) {\n      const storedHorses = getStoredHorses();\n      if (storedHorses.length > 0) {\n        commit('setHorses', storedHorses);\n      } else {\n        const horses = generateHorses();\n        commit('setHorses', horses);\n        saveHorsesToLocalStorage(horses);\n      }\n    },\n    startRace({\n      commit,\n      state\n    }) {\n      commit('clearRaceResults');\n      const schedule = generateRaceSchedule(state.horses);\n      commit('setRaceSchedule', schedule);\n      schedule.forEach((race, index) => {\n        setTimeout(() => {\n          race.horses.forEach(horse => {\n            const newPosition = horse.position + Math.random() * 10;\n            commit('updateHorsePosition', {\n              horseId: horse.id,\n              position: newPosition\n            });\n          });\n          const winner = race.horses.reduce((prev, current) => prev.position > current.position ? prev : current);\n          const result = `Winner: Horse ${winner.id}`;\n          commit('addRaceResult', result);\n        }, index * 5000);\n      });\n    }\n  }\n});","map":{"version":3,"names":["createStore","generateHorses","horses","i","push","id","color","getRandomColor","condition","Math","floor","random","position","image","require","letters","LOCAL_STORAGE_KEY","getStoredHorses","JSON","parse","localStorage","getItem","saveHorsesToLocalStorage","setItem","stringify","state","raceSchedule","raceResults","mutations","setHorses","setRaceSchedule","schedule","updateHorsePosition","horseId","horse","find","h","addRaceResult","result","clearRaceResults","actions","initializeGame","commit","storedHorses","length","startRace","generateRaceSchedule","forEach","race","index","setTimeout","newPosition","winner","reduce","prev","current"],"sources":["/Users/aleynakoluk/Desktop/horse-racing-game/src/store/index.js"],"sourcesContent":["import { createStore } from 'vuex';\n\n// Function to generate horses\nfunction generateHorses() {\n  const horses = [];\n  for (let i = 1; i <= 20; i++) {\n    horses.push({\n      id: i,\n      color: getRandomColor(),\n      condition: Math.floor(Math.random() * 100) + 1,\n      position: 0,\n      image: require(`@/assets/horse${i}.png`),\n    });\n  }\n  return horses;\n}\n\n// Function to generate random color\nfunction getRandomColor() {\n  const letters = '0123456789ABCDEF';\n  let color = '#';\n  for (let i = 0; i < 6; i++) {\n    color += letters[Math.floor(Math.random() * 16)];\n  }\n  return color;\n}\n\n// Local storage key\nconst LOCAL_STORAGE_KEY = 'horse-racing-game';\n\n// Function to retrieve horses from local storage\nfunction getStoredHorses() {\n  return JSON.parse(localStorage.getItem(LOCAL_STORAGE_KEY)) || [];\n}\n\n// Function to save horses to local storage\nfunction saveHorsesToLocalStorage(horses) {\n  localStorage.setItem(LOCAL_STORAGE_KEY, JSON.stringify(horses));\n}\n\nexport default createStore({\n  state: {\n    horses: [],\n    raceSchedule: [],\n    raceResults: [],\n  },\n  mutations: {\n    setHorses(state, horses) {\n      state.horses = horses;\n    },\n    setRaceSchedule(state, schedule) {\n      state.raceSchedule = schedule;\n    },\n    updateHorsePosition(state, { horseId, position }) {\n      const horse = state.horses.find(h => h.id === horseId);\n      if (horse) {\n        horse.position = position;\n      }\n      saveHorsesToLocalStorage(state.horses); // Save horses after position update\n    },\n    addRaceResult(state, result) {\n      state.raceResults.push(result);\n    },\n    clearRaceResults(state) {\n      state.raceResults = [];\n    },\n  },\n  actions: {\n    initializeGame({ commit }) {\n      const storedHorses = getStoredHorses();\n      if (storedHorses.length > 0) {\n        commit('setHorses', storedHorses);\n      } else {\n        const horses = generateHorses();\n        commit('setHorses', horses);\n        saveHorsesToLocalStorage(horses);\n      }\n    },\n    startRace({ commit, state }) {\n      commit('clearRaceResults');\n      const schedule = generateRaceSchedule(state.horses);\n      commit('setRaceSchedule', schedule);\n\n      schedule.forEach((race, index) => {\n        setTimeout(() => {\n          race.horses.forEach(horse => {\n            const newPosition = horse.position + Math.random() * 10;\n            commit('updateHorsePosition', { horseId: horse.id, position: newPosition });\n          });\n          const winner = race.horses.reduce((prev, current) => (prev.position > current.position) ? prev : current);\n          const result = `Winner: Horse ${winner.id}`;\n          commit('addRaceResult', result);\n        }, index * 5000);\n      });\n    },\n  },\n});\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}