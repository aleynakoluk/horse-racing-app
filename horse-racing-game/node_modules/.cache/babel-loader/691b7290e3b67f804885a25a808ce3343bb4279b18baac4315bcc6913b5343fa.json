{"ast":null,"code":"import \"core-js/modules/es.array.push.js\";\nimport \"core-js/modules/esnext.set.difference.v2.js\";\nimport \"core-js/modules/esnext.set.intersection.v2.js\";\nimport \"core-js/modules/esnext.set.is-disjoint-from.v2.js\";\nimport \"core-js/modules/esnext.set.is-subset-of.v2.js\";\nimport \"core-js/modules/esnext.set.is-superset-of.v2.js\";\nimport \"core-js/modules/esnext.set.symmetric-difference.v2.js\";\nimport \"core-js/modules/esnext.set.union.v2.js\";\nimport { createStore } from 'vuex';\n\n// At isimleri\nconst horseNames = [\"Sparky\", \"Buddy\", \"Max\", \"Rocky\", \"Bella\", \"Lucy\", \"Daisy\", \"Charlie\", \"Milo\", \"Oliver\"];\n\n// Atları oluşturacak fonksiyon\nfunction generateHorses() {\n  const horses = [];\n  for (let i = 0; i < horseNames.length; i++) {\n    horses.push({\n      id: i + 1,\n      // ID'leri 1'den başlatıyoruz\n      name: horseNames[i],\n      color: getRandomColor(),\n      condition: Math.floor(Math.random() * 100) + 1,\n      position: 0,\n      image: require(`@/assets/horse${i + 1}.png`) // ` karakteri eklenmiş\n    });\n  }\n  return horses;\n}\n\n// Rastgele renk oluşturacak fonksiyon\nfunction getRandomColor() {\n  const letters = '0123456789ABCDEF';\n  let color = '#';\n  for (let i = 0; i < 6; i++) {\n    color += letters[Math.floor(Math.random() * 16)];\n  }\n  return color;\n}\n\n// Yerel depolama anahtarları\nconst LOCAL_STORAGE_KEY = 'horse-racing-game';\n\n// Yarış programını oluşturacak fonksiyon\nfunction generateRaceSchedule(horses) {\n  const distances = [1200, 1400, 1600, 1800, 2000, 2200];\n  const schedule = distances.map(distance => {\n    const selectedHorses = [];\n    const horseIds = new Set();\n\n    // 10 at seçmek için döngü\n    for (let i = 1; i <= 10; i++) {\n      let horse;\n      do {\n        horse = horses[Math.floor(Math.random() * horses.length)];\n      } while (horseIds.has(horse.id));\n      selectedHorses.push(horse);\n      horseIds.add(horse.id);\n    }\n    return {\n      distance,\n      horses: selectedHorses\n    };\n  });\n  return schedule;\n}\nexport default createStore({\n  state: {\n    horses: [],\n    raceSchedule: [],\n    raceResults: []\n  },\n  mutations: {\n    setHorses(state, horses) {\n      state.horses = horses;\n    },\n    setRaceSchedule(state, schedule) {\n      state.raceSchedule = schedule;\n    },\n    updateHorsePosition(state, {\n      horseId,\n      position\n    }) {\n      const horse = state.horses.find(h => h.id === horseId);\n      if (horse) {\n        horse.position = position;\n      }\n    },\n    addRaceResult(state, result) {\n      state.raceResults.push(result);\n    },\n    clearRaceResults(state) {\n      state.raceResults = [];\n    }\n  },\n  actions: {\n    generateHorses({\n      commit\n    }) {\n      // Önce yerel depolamadan atları al\n      const storedHorses = JSON.parse(localStorage.getItem(LOCAL_STORAGE_KEY));\n      if (storedHorses) {\n        commit('setHorses', storedHorses);\n      } else {\n        // Yerel depolamada atlar yoksa yeni atlar oluştur\n        const horses = generateHorses();\n        commit('setHorses', horses);\n        // Oluşturulan atları yerel depolamaya kaydet\n        localStorage.setItem(LOCAL_STORAGE_KEY, JSON.stringify(horses));\n      }\n    },\n    startRace({\n      commit,\n      state\n    }) {\n      commit('clearRaceResults');\n      const schedule = generateRaceSchedule(state.horses);\n      commit('setRaceSchedule', schedule);\n      schedule.forEach((race, index) => {\n        setTimeout(() => {\n          race.horses.forEach(horse => {\n            const newPosition = horse.position + Math.random() * 10;\n            commit('updateHorsePosition', {\n              horseId: horse.id,\n              position: newPosition\n            });\n          });\n          const winner = race.horses.reduce((prev, current) => prev.position > current.position ? prev : current);\n          const result = `Winner: Horse ${winner.name}`;\n          commit('addRaceResult', result);\n        }, index * 5000); // Her yarışı 5 saniye arayla başlatır\n      });\n    }\n  }\n});","map":{"version":3,"names":["createStore","horseNames","generateHorses","horses","i","length","push","id","name","color","getRandomColor","condition","Math","floor","random","position","image","require","letters","LOCAL_STORAGE_KEY","generateRaceSchedule","distances","schedule","map","distance","selectedHorses","horseIds","Set","horse","has","add","state","raceSchedule","raceResults","mutations","setHorses","setRaceSchedule","updateHorsePosition","horseId","find","h","addRaceResult","result","clearRaceResults","actions","commit","storedHorses","JSON","parse","localStorage","getItem","setItem","stringify","startRace","forEach","race","index","setTimeout","newPosition","winner","reduce","prev","current"],"sources":["/Users/aleynakoluk/Desktop/horse-racing-game/src/store/index.js"],"sourcesContent":["import { createStore } from 'vuex';\n\n// At isimleri\nconst horseNames = [\"Sparky\", \"Buddy\", \"Max\", \"Rocky\", \"Bella\", \"Lucy\", \"Daisy\", \"Charlie\", \"Milo\", \"Oliver\"];\n\n// Atları oluşturacak fonksiyon\nfunction generateHorses() {\n  const horses = [];\n  for (let i = 0; i < horseNames.length; i++) {\n    horses.push({\n      id: i + 1, // ID'leri 1'den başlatıyoruz\n      name: horseNames[i],\n      color: getRandomColor(),\n      condition: Math.floor(Math.random() * 100) + 1,\n      position: 0,\n      image: require(`@/assets/horse${i + 1}.png`), // ` karakteri eklenmiş\n    });\n  }\n  return horses;\n}\n\n// Rastgele renk oluşturacak fonksiyon\nfunction getRandomColor() {\n  const letters = '0123456789ABCDEF';\n  let color = '#';\n  for (let i = 0; i < 6; i++) {\n    color += letters[Math.floor(Math.random() * 16)];\n  }\n  return color;\n}\n\n// Yerel depolama anahtarları\nconst LOCAL_STORAGE_KEY = 'horse-racing-game';\n\n// Yarış programını oluşturacak fonksiyon\nfunction generateRaceSchedule(horses) {\n  const distances = [1200, 1400, 1600, 1800, 2000, 2200];\n  const schedule = distances.map(distance => {\n    const selectedHorses = [];\n    const horseIds = new Set();\n\n    // 10 at seçmek için döngü\n    for (let i = 1; i <= 10; i++) {\n      let horse;\n      do {\n        horse = horses[Math.floor(Math.random() * horses.length)];\n      } while (horseIds.has(horse.id));\n      selectedHorses.push(horse);\n      horseIds.add(horse.id);\n    }\n\n    return {\n      distance,\n      horses: selectedHorses,\n    };\n  });\n  return schedule;\n}\n\nexport default createStore({\n  state: {\n    horses: [],\n    raceSchedule: [],\n    raceResults: [],\n  },\n  mutations: {\n    setHorses(state, horses) {\n      state.horses = horses;\n    },\n    setRaceSchedule(state, schedule) {\n      state.raceSchedule = schedule;\n    },\n    updateHorsePosition(state, { horseId, position }) {\n      const horse = state.horses.find(h => h.id === horseId);\n      if (horse) {\n        horse.position = position;\n      }\n    },\n    addRaceResult(state, result) {\n      state.raceResults.push(result);\n    },\n    clearRaceResults(state) {\n      state.raceResults = [];\n    },\n  },\n  actions: {\n    generateHorses({ commit }) {\n      // Önce yerel depolamadan atları al\n      const storedHorses = JSON.parse(localStorage.getItem(LOCAL_STORAGE_KEY));\n      if (storedHorses) {\n        commit('setHorses', storedHorses);\n      } else {\n        // Yerel depolamada atlar yoksa yeni atlar oluştur\n        const horses = generateHorses();\n        commit('setHorses', horses);\n        // Oluşturulan atları yerel depolamaya kaydet\n        localStorage.setItem(LOCAL_STORAGE_KEY, JSON.stringify(horses));\n      }\n    },\n    startRace({ commit, state }) {\n      commit('clearRaceResults');\n      const schedule = generateRaceSchedule(state.horses);\n      commit('setRaceSchedule', schedule);\n\n      schedule.forEach((race, index) => {\n        setTimeout(() => {\n          race.horses.forEach(horse => {\n            const newPosition = horse.position + Math.random() * 10;\n            commit('updateHorsePosition', { horseId: horse.id, position: newPosition });\n          });\n          const winner = race.horses.reduce((prev, current) => (prev.position > current.position) ? prev : current);\n          const result = `Winner: Horse ${winner.name}`;\n          commit('addRaceResult', result);\n        }, index * 5000); // Her yarışı 5 saniye arayla başlatır\n      });\n    },\n  },\n});\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}