{"ast":null,"code":"import \"core-js/modules/es.array.push.js\";\nimport \"core-js/modules/esnext.set.difference.v2.js\";\nimport \"core-js/modules/esnext.set.intersection.v2.js\";\nimport \"core-js/modules/esnext.set.is-disjoint-from.v2.js\";\nimport \"core-js/modules/esnext.set.is-subset-of.v2.js\";\nimport \"core-js/modules/esnext.set.is-superset-of.v2.js\";\nimport \"core-js/modules/esnext.set.symmetric-difference.v2.js\";\nimport \"core-js/modules/esnext.set.union.v2.js\";\nimport { createStore } from 'vuex';\n\n// Function to generate horses\nfunction generateHorses() {\n  const horses = [];\n  for (let i = 1; i <= 20; i++) {\n    horses.push({\n      id: i,\n      color: getRandomColor(),\n      condition: Math.floor(Math.random() * 100) + 1,\n      position: 0,\n      image: require(`@/assets/horse${i}.png`)\n    });\n  }\n  return horses;\n}\n\n// Function to generate random color\nfunction getRandomColor() {\n  const letters = '0123456789ABCDEF';\n  let color = '#';\n  for (let i = 0; i < 6; i++) {\n    color += letters[Math.floor(Math.random() * 16)];\n  }\n  return color;\n}\n\n// Local storage key\nconst LOCAL_STORAGE_KEY = 'horse-racing-game';\n\n// Function to retrieve horses from local storage\nfunction getStoredHorses() {\n  return JSON.parse(localStorage.getItem(LOCAL_STORAGE_KEY)) || [];\n}\n\n// Function to save horses to local storage\nfunction saveHorsesToLocalStorage(horses) {\n  localStorage.setItem(LOCAL_STORAGE_KEY, JSON.stringify(horses));\n}\n\n// Function to generate race schedule\nfunction generateRaceSchedule(horses) {\n  const distances = [1200, 1400, 1600, 1800, 2000, 2200];\n  const schedule = distances.map(distance => {\n    const selectedHorses = [];\n    const horseIds = new Set();\n\n    // Select 10 unique horses\n    for (let i = 1; i <= 10; i++) {\n      let horse;\n      do {\n        horse = horses[Math.floor(Math.random() * horses.length)];\n      } while (horseIds.has(horse.id));\n      selectedHorses.push(horse);\n      horseIds.add(horse.id);\n    }\n    return {\n      distance,\n      horses: selectedHorses\n    };\n  });\n  return schedule;\n}\nexport default createStore({\n  state: {\n    horses: [],\n    raceSchedule: [],\n    raceResults: []\n  },\n  mutations: {\n    setHorses(state, horses) {\n      state.horses = horses;\n    },\n    setRaceSchedule(state, schedule) {\n      state.raceSchedule = schedule;\n    },\n    updateHorsePosition(state, {\n      horseId,\n      position\n    }) {\n      const horse = state.horses.find(h => h.id === horseId);\n      if (horse) {\n        horse.position = position;\n      }\n      saveHorsesToLocalStorage(state.horses); // Save horses after position update\n    },\n    addRaceResult(state, result) {\n      state.raceResults.push(result);\n    },\n    clearRaceResults(state) {\n      state.raceResults = [];\n    }\n  },\n  actions: {\n    initializeGame({\n      commit\n    }) {\n      const storedHorses = getStoredHorses();\n      if (storedHorses.length > 0) {\n        commit('setHorses', storedHorses);\n      } else {\n        const horses = generateHorses();\n        commit('setHorses', horses);\n        saveHorsesToLocalStorage(horses);\n      }\n    },\n    generateHorses({\n      commit\n    }) {\n      const horses = generateHorses();\n      commit('setHorses', horses);\n      saveHorsesToLocalStorage(horses);\n    },\n    startRace({\n      commit,\n      state\n    }) {\n      commit('clearRaceResults');\n      const schedule = generateRaceSchedule(state.horses); // Use generateRaceSchedule here\n      commit('setRaceSchedule', schedule);\n      schedule.forEach((race, index) => {\n        setTimeout(() => {\n          race.horses.forEach(horse => {\n            const newPosition = horse.position + Math.random() * 10;\n            commit('updateHorsePosition', {\n              horseId: horse.id,\n              position: newPosition\n            });\n          });\n          const winner = race.horses.reduce((prev, current) => prev.position > current.position ? prev : current);\n          const result = `Winner: Horse ${winner.id}`;\n          commit('addRaceResult', result);\n        }, index * 5000);\n      });\n    }\n  }\n});","map":{"version":3,"names":["createStore","generateHorses","horses","i","push","id","color","getRandomColor","condition","Math","floor","random","position","image","require","letters","LOCAL_STORAGE_KEY","getStoredHorses","JSON","parse","localStorage","getItem","saveHorsesToLocalStorage","setItem","stringify","generateRaceSchedule","distances","schedule","map","distance","selectedHorses","horseIds","Set","horse","length","has","add","state","raceSchedule","raceResults","mutations","setHorses","setRaceSchedule","updateHorsePosition","horseId","find","h","addRaceResult","result","clearRaceResults","actions","initializeGame","commit","storedHorses","startRace","forEach","race","index","setTimeout","newPosition","winner","reduce","prev","current"],"sources":["/Users/aleynakoluk/Desktop/horse-racing-game/src/store/index.js"],"sourcesContent":["import { createStore } from 'vuex';\n\n// Function to generate horses\nfunction generateHorses() {\n  const horses = [];\n  for (let i = 1; i <= 20; i++) {\n    horses.push({\n      id: i,\n      color: getRandomColor(),\n      condition: Math.floor(Math.random() * 100) + 1,\n      position: 0,\n      image: require(`@/assets/horse${i}.png`),\n    });\n  }\n  return horses;\n}\n\n// Function to generate random color\nfunction getRandomColor() {\n  const letters = '0123456789ABCDEF';\n  let color = '#';\n  for (let i = 0; i < 6; i++) {\n    color += letters[Math.floor(Math.random() * 16)];\n  }\n  return color;\n}\n\n// Local storage key\nconst LOCAL_STORAGE_KEY = 'horse-racing-game';\n\n// Function to retrieve horses from local storage\nfunction getStoredHorses() {\n  return JSON.parse(localStorage.getItem(LOCAL_STORAGE_KEY)) || [];\n}\n\n// Function to save horses to local storage\nfunction saveHorsesToLocalStorage(horses) {\n  localStorage.setItem(LOCAL_STORAGE_KEY, JSON.stringify(horses));\n}\n\n// Function to generate race schedule\nfunction generateRaceSchedule(horses) {\n  const distances = [1200, 1400, 1600, 1800, 2000, 2200];\n  const schedule = distances.map(distance => {\n    const selectedHorses = [];\n    const horseIds = new Set();\n\n    // Select 10 unique horses\n    for (let i = 1; i <= 10; i++) {\n      let horse;\n      do {\n        horse = horses[Math.floor(Math.random() * horses.length)];\n      } while (horseIds.has(horse.id));\n      selectedHorses.push(horse);\n      horseIds.add(horse.id);\n    }\n\n    return {\n      distance,\n      horses: selectedHorses,\n    };\n  });\n  return schedule;\n}\n\nexport default createStore({\n  state: {\n    horses: [],\n    raceSchedule: [],\n    raceResults: [],\n  },\n  mutations: {\n    setHorses(state, horses) {\n      state.horses = horses;\n    },\n    setRaceSchedule(state, schedule) {\n      state.raceSchedule = schedule;\n    },\n    updateHorsePosition(state, { horseId, position }) {\n      const horse = state.horses.find(h => h.id === horseId);\n      if (horse) {\n        horse.position = position;\n      }\n      saveHorsesToLocalStorage(state.horses); // Save horses after position update\n    },\n    addRaceResult(state, result) {\n      state.raceResults.push(result);\n    },\n    clearRaceResults(state) {\n      state.raceResults = [];\n    },\n  },\n  actions: {\n    initializeGame({ commit }) {\n      const storedHorses = getStoredHorses();\n      if (storedHorses.length > 0) {\n        commit('setHorses', storedHorses);\n      } else {\n        const horses = generateHorses();\n        commit('setHorses', horses);\n        saveHorsesToLocalStorage(horses);\n      }\n    },\n    generateHorses({ commit }) {\n      const horses = generateHorses();\n      commit('setHorses', horses);\n      saveHorsesToLocalStorage(horses);\n    },\n    startRace({ commit, state }) {\n      commit('clearRaceResults');\n      const schedule = generateRaceSchedule(state.horses); // Use generateRaceSchedule here\n      commit('setRaceSchedule', schedule);\n\n      schedule.forEach((race, index) => {\n        setTimeout(() => {\n          race.horses.forEach(horse => {\n            const newPosition = horse.position + Math.random() * 10;\n            commit('updateHorsePosition', { horseId: horse.id, position: newPosition });\n          });\n          const winner = race.horses.reduce((prev, current) => (prev.position > current.position) ? prev : current);\n          const result = `Winner: Horse ${winner.id}`;\n          commit('addRaceResult', result);\n        }, index * 5000);\n      });\n    },\n  },\n});\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}